#!/bin/bash

# Script de d√©ploiement pour GitHub Actions
# Ce script met √† jour le service ECS avec une nouvelle image

set -e

# Variables d'environnement (√† d√©finir dans GitHub Actions)
AWS_REGION=${AWS_REGION:-"eu-west-3"}
ECS_CLUSTER_NAME=${ECS_CLUSTER_NAME:-"banana-cluster"}
ECS_SERVICE_NAME=${ECS_SERVICE_NAME:-"banana-front-service"}
ECS_TASK_DEFINITION_FAMILY=${ECS_TASK_DEFINITION_FAMILY:-"banana-front"}
NEW_IMAGE=${NEW_IMAGE:-"rg.fr-par.scw.cloud/banana/banana-front:latest"}

echo "üöÄ D√©ploiement de l'application sur ECS..."
echo "Cluster: $ECS_CLUSTER_NAME"
echo "Service: $ECS_SERVICE_NAME"
echo "Nouvelle image: $NEW_IMAGE"
echo "R√©gion: $AWS_REGION"

# 1. R√©cup√©rer la d√©finition de t√¢che actuelle
echo "üìã R√©cup√©ration de la d√©finition de t√¢che actuelle..."
TASK_DEFINITION=$(aws ecs describe-task-definition \
  --task-definition "$ECS_TASK_DEFINITION_FAMILY" \
  --region "$AWS_REGION" \
  --query 'taskDefinition' \
  --output json)

# 2. Cr√©er une nouvelle d√©finition de t√¢che avec la nouvelle image
echo "üîÑ Cr√©ation d'une nouvelle d√©finition de t√¢che..."
NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | \
  jq --arg IMAGE "$NEW_IMAGE" \
  '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')

# 3. Enregistrer la nouvelle d√©finition de t√¢che
echo "üíæ Enregistrement de la nouvelle d√©finition de t√¢che..."
NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
  --cli-input-json "$NEW_TASK_DEFINITION" \
  --region "$AWS_REGION" \
  --query 'taskDefinition.taskDefinitionArn' \
  --output text)

echo "‚úÖ Nouvelle d√©finition de t√¢che cr√©√©e: $NEW_TASK_DEFINITION_ARN"

# 4. Mettre √† jour le service ECS
echo "üîÑ Mise √† jour du service ECS..."
aws ecs update-service \
  --cluster "$ECS_CLUSTER_NAME" \
  --service "$ECS_SERVICE_NAME" \
  --task-definition "$NEW_TASK_DEFINITION_ARN" \
  --region "$AWS_REGION"

echo "‚úÖ Service ECS mis √† jour avec la nouvelle d√©finition de t√¢che"

# 5. Attendre que le d√©ploiement soit termin√©
echo "‚è≥ Attente de la fin du d√©ploiement..."
aws ecs wait services-stable \
  --cluster "$ECS_CLUSTER_NAME" \
  --services "$ECS_SERVICE_NAME" \
  --region "$AWS_REGION"

echo "üéâ D√©ploiement termin√© avec succ√®s!"

# 6. Afficher le statut du service
echo "üìä Statut du service:"
aws ecs describe-services \
  --cluster "$ECS_CLUSTER_NAME" \
  --services "$ECS_SERVICE_NAME" \
  --region "$AWS_REGION" \
  --query 'services[0].{ServiceName:serviceName,Status:status,DesiredCount:desiredCount,RunningCount:runningCount,PendingCount:pendingCount}' \
  --output table

# 7. Afficher l'URL de l'application
echo "üåê URL de l'application:"
aws elbv2 describe-load-balancers \
  --region "$AWS_REGION" \
  --query 'LoadBalancers[?contains(LoadBalancerName, `banana-front`)].DNSName' \
  --output text | sed 's/^/http:\/\//'
